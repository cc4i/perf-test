

#{"projectId": ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}, "network": "pt-vpc-default"}

main:
    params: [input]
    steps:
    - BuildImages:
        call: http.post
        args:
            url: ${"https://" + input.url + "/v1/build"}
            auth:
                type: OIDC
            body: ${input.taskRequest}
        result: buildReturn
    - CreateVPC:
        steps:
        - ArgsMap:
            call: sys.log
            args:
                data: ${input}
        - Call4VPC:
            call: http.post
            args:
                url: ${"https://" + input.url + "/v1/vpc"}
                auth:
                    type: OIDC
                body: ${input.vpc}
            result: vpc
    - CreateServiceAccount:
        steps:
        - Call4ServiceAccount:
            call: http.post
            args:
                url: ${"https://" + input.url + "/v1/sa"}
                auth:
                    type: OIDC
                body: ${input.serviceAccount}
            result: sa
        - CallBindingSA:
            call: http.post
            args:
                url: ${"https://" + input.url + "/v1/gkeap/bindingsa"}
                auth:
                    type: OIDC
                body: ${input.serviceAccount}
            result: bindingSA

    - CreateAPCluster:
        steps:
        - Call4APCluster:
            call: http.post
            args:
                url: ${"https://" + input.url + "/v1/gkeap"}
                auth:
                    type: OIDC
                body: ${input.gkes}
            result: apCluster
        - ReturnCall4APCluster:
            call: sys.log
            args:
                data: ${apCluster}
        - CheckAPCluster:
            call: http.post
            args:
                url: ${"https://" + input.url + "/v1/gkeap/status"}
                auth:
                    type: OIDC
                body: ${apCluster.body}
            result: apClusterStatus
        - CheckIfDone:
            switch:
                - condition: ${apClusterStatus.body.status == "DONE"}
                  next: ConfigureCluster
        - Wait:
            call: sys.sleep
            args:
                seconds: 10
            next: CheckAPCluster

    - ConfigureCluster:
        steps:
        - Call4ClusterInfo:
            call: http.post
            args:
                url: ${"https://" + input.url + "/v1/gkeap/info"}
                auth:
                    type: OIDC
                body: ${input.gkes}
            result: clusterInfo
        - ReturnClusterInfo:
            call: sys.log
            args:
                data: ${clusterInfo.body}

        - ApplyStorageClassinAP:
            for:
                value: gke
                in: ${clusterInfo.body}
                steps:
                - VerifyIfMaster:
                    switch:
                    - condition: ${gke.isMaster != "true"}
                      next: continue
                - ApplyManifest4SC:
                    call: http.post
                    args:
                        url: ${"https://" + input.url + "/v1/gkeap/manifest/sc.yaml"}
                        auth:
                            type: OIDC
                        body: ${gke}
                    result: appliedSC
                - WaitSC2Ready:
                    call: sys.sleep
                    args:
                        seconds: 10
                - ApplyManifest4PVC:
                    call: http.post
                    args:
                        url: ${"https://" + input.url + "/v1/gkeap/manifest/pvc.yaml"}
                        auth:
                            type: OIDC
                        body: ${gke}
                    result: appliedPVC
                - CheckPVC:
                    call: http.post
                    args:
                        url: ${"https://" + input.url + "/v1/gkeap/pvc"}
                        auth:
                            type: OIDC
                        body: ${gke}
                    result: pvcStatus
                - CheckPVCIfDone:
                    switch:
                        - condition: ${pvcStatus.body.status == "DONE"}
                          next: ApplyManifest4PtOperator
                - WaitPVC:
                    call: sys.sleep
                    args:
                        seconds: 10
                    next: CheckPVC
                - ApplyManifest4PtOperator:
                    call: http.post
                    args:
                        url: ${"https://" + input.url + "/v1/gkeap/manifest/pt-operator.yaml"}
                        auth:
                            type: OIDC
                        body: ${gke}
                    result: appliedPtOperator
                - CheckPtOperator:
                    call: http.post
                    args:
                        url: ${"https://" + input.url + "/v1/gkeap/ptoperator"}
                        auth:
                            type: OIDC
                        body: ${gke}
                    result: ptStatus
                - CheckPtOperatorIfDone:
                    switch:
                        - condition: ${ptStatus.body.status == "DONE"}
                          next: ApplyaPtTask
                - WaitPtOperator:
                    call: sys.sleep
                    args:
                        seconds: 10
                    next: CheckPtOperator
                - ApplyaPtTask:
                    call: http.post
                    args:
                        url: ${"https://" + input.url + "/v1/apply/pttask/" + sys.get_env("GOOGLE_CLOUD_WORKFLOW_EXECUTION_ID")}
                        auth:
                            type: OIDC
                        body: ${input}
                    result: ptTaskStatus
    - CreateDashboard:
        call: http.post
        args:
            url: ${"https://" + input.url + "/v1/dashboard/pttask" + sys.get_env("GOOGLE_CLOUD_PROJECT_ID") + "/"+ sys.get_env("GOOGLE_CLOUD_WORKFLOW_EXECUTION_ID")}
            auth:
                type: OIDC
            body: ${input}
        result: dashboardUrl
    - AllDone:
        return: ${input}